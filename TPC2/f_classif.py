# -*- coding: utf-8 -*-
"""f_classif.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gFPbLbgvceg8KNNnYjiF4rkIepkVR7wf
"""

# Commented out IPython magic to ensure Python compatibility.
# %load_ext autoreload
# %autoreload 2

import numpy as np
from scipy.stats import f_oneway

from tpc1 import Dataset

class F_classif:
#do the ANOVA test for feature selection

    def __init__(self, alpha = 0.05):
       
        #alpha is the significance level for the ANOVA test
        self.alpha = alpha
    

    def fit(self, dataset: Dataset, y: np.ndarray) -> 'F_classif':
        #group samples/exemples by classes and calculate f and p values for each feature
        
        classes = np.unique(y)
        X_classes = [dataset.X[y == c] for c in classes]
        
        f_values = []
        p_values = []
        for i in range(dataset.X.shape[1]):
            f, p = f_oneway(*[X[:, i] for X in X_classes])
            f_values.append(f)
            p_values.append(p)
        
        self.f_values_ = np.array(f_values)
        self.p_values_ = np.array(p_values)

        return self


    def transform(self, dataset: Dataset) -> Dataset:
        #returns the features with p values below the alpha

        new = self.p_values_ < 0.05
        X = dataset.X[:, new]
        features = np.array(dataset.features)[new]

        return Dataset(X=X, y=dataset.y, features=list(features), label=dataset.label)


    def fit_transform(self, dataset: Dataset) -> Dataset:
        #fitting and transforming in only one step

        self.fit(dataset)

        return self.transform(dataset)

from tpc1 import Dataset

dataset = Dataset(X=np.array([[0, 2, 0, 3],
                            [0, 1, 4, 3],
                            [0, 1, 1, 3]]),
                y=np.array([0, 1, 0]),
                features=["f1", "f2", "f3", "f4"],
                label="y")

f = F_Classif()

f.fit(dataset, dataset.y)

new_dataset = f.transform(dataset)

print(new_dataset.features)