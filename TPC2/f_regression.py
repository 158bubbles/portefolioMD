# -*- coding: utf-8 -*-
"""f_regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17iqeejyuw1rIcO-MsZYXmLlDDw456RdL
"""

# Commented out IPython magic to ensure Python compatibility.
# %load_ext autoreload
# %autoreload 2

import numpy as np
from tpc1 import Dataset

class F_regression:
#F-regression for feature selection

    def __init__(self, alpha = 0.05):
        #initializes the attributes and sets the alpha value

        if alpha < 0 or alpha > 1:
            raise ValueError("Sorry, alpha must be  >0 and <1")

        self.F_values = None
        self.p_values = None
        self.alpha = alpha


    def fit(self, dataset: Dataset) -> 'F_regression':
        #computes the F-values and p-values for each feature

        X = dataset.X
        y = dataset.y

        n_features = X.shape[1]
        self.F_values = np.zeros(n_features)
        self.p_values = np.zeros(n_features)

        for i in range(n_features):
          
            X_i = X[:, i].reshape(-1, 1)
            model_i = LinearRegression().fit(X_i, y)

            SSE = ((model_i.predict(X_i) - y)**2).sum()
            SSTO = ((y - y.mean())**2).sum()

            df_reg = 1
            df_res = len(y) - 2
            self.F_values[i] = (SSTO - SSE) / df_reg / (SSE / df_res)
            self.p_values[i] = 1 - f.cdf(self.F_values[i], df_reg, df_res)

            return self


    def transform(self, dataset: Dataset) -> Dataset:
        #returns a dataset with only the features whose p-value is less than the alpha

        features = self.p_values < self.alpha
        X_features = X[:, features]
        newOnes = np.array(dataset.newOnes)[features]

        return Dataset(X=X_features, y=dataset.y, newOnes=list(newOnes), label=dataset.label)

    
    def fit_transform(self, dataset: Dataset) -> Dataset:
        #applies both fitting and transforming in only one step

        self.fit(dataset)
        res = self.transform(dataset)

        return res

from tpc1 import Dataset

dataset = Dataset(X=np.array([[0, 2, 0, 3],
                            [0, 1, 4, 3],
                            [0, 1, 1, 3]]),
                y=np.array([0, 1, 0]),
                features=["f1", "f2", "f3", "f4"],
                label="y")

f = F_regression()

f.fit(dataset)

new_dataset = f.transform(dataset)

print(new_dataset.features)