# -*- coding: utf-8 -*-
"""variance_threshold.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/155cxG3fyJfoatVrsdNtBOwzX2UZSPtJx
"""

import numpy as np


class VarianceThreshold:
    #class that can be used to remove features with low variance

    def __init__(self, threshold: float = 0.0):
        
        if threshold < 0:
            raise ValueError("Sorry, Threshold must be >= 0")

        self.threshold = threshold

        self.variance = None


    def fit(self, X) -> 'VarianceThreshold':
        #calculates the variances of each feature in the input data

        self.variance = np.var(X, axis=0)

        return self

    def transform(self, X):
        #applies the variance thresholding to the input data
        
        new_features = self.variance > self.threshold
        X_selected = X[:, new_features]
        if X_selected is not None:
            print('features with variance > threshold:')
            print(X_selected)
        else:
            print('features with variance <= threshold:')
        return X_selected

    def fit_transform(self, X):
        #applies both fitting and transforming in only one step

        self.fit(X)
        res = self.transform(X)
        return res

import numpy as np

def teste():
  X = np.array([[1, 8, 1, 3],
                  [5, 1, 1, 3],
                  [4, 0, 1, 3]])
  y = np.array([0, 1, 0])

  f = VarianceThreshold()
  f.fit(X)

  new = f.transform(X)

teste()