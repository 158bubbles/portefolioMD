# -*- coding: utf-8 -*-
"""selectKBest.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BqzT2IKULAGi6r2khbv5uzmhI-EBVJYi
"""

# Commented out IPython magic to ensure Python compatibility.
# %load_ext autoreload
# %autoreload 2

import numpy as np

from tpc1 import Dataset
from typing import Callable

class SelectKBest:
#select features according to the k highest scores

    def __init__(self, score_func: Callable, k: int):
        #score_func: function that return an array of scores for each feature (scores, p_values)
        #k: number of top features to select

        if k <= 0:
            raise ValueError("Sorry, k must be > 0")

        self.score_func = score_func
        self.k = k

        self.f = None
        self.p = None


    def fit(self, dataset: Dataset) -> 'SelectKBest':
        #calculate the scores for each feature

        self.f, self.p = self.score_func(dataset)

        return self


    def transform(self, dataset: Dataset) -> Dataset:
        #transforms the dataset X by selecting the top k features based on their scores

        new = np.argsort(self.F)[-self.k:]
        features = np.array(dataset.features)[new]
        
        return Dataset(X=dataset.X[:, new], y=dataset.y, features=list(features), label=dataset.label)


    def fit_transform(self, dataset: Dataset) -> Dataset:
        #calculates the scores and transforms the dataset by selecting the k highest scoring features
        
        self.fit(dataset)
        
        return self.transform(dataset)

from tpc1 import Dataset

dataset = Dataset(X=np.array([[0, 2, 0, 3],
                            [0, 1, 4, 3],
                            [0, 1, 1, 3]]),
                y=np.array([0, 1, 0]),
                features=["f1", "f2", "f3", "f4"],
                label="y")

f = SelectKBest()

f.fit(dataset)

new_dataset = f.transform(dataset)

print(new_dataset.features)